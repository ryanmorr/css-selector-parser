{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/parse.js"],"names":["f","exports","module","define","amd","window","global","self","this","parse","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","selector","trim","cache","token","groups","tokens","hasWhitespace","getName","name","match","nameRe","reduceSelector","unescapeCSS","index","substring","stripWhitespace","start","isWhitespace","charAt","str","replace","escapeRe","hex","char","String","fromCharCode","parseInt","resetToken","attributes","pseudos","nodeName","push","operator","value","ignoreCase","data","atttributeRe","toLowerCase","_data","pseudoRe","_name","test","Object","create"],"mappings":"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","file":"parse.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// Adapted from https://github.com/fb55/css-what\r\n\r\nconst cache = Object.create(null);\r\nconst nameRe = /^(?:\\\\.|[\\w\\-\\u00c0-\\uFFFF])+/;\r\nconst escapeRe = /\\\\(?:([0-9a-f]{1,6} ?)|(.))/ig;\r\nconst pseudoRe = /:((?:[\\w\\u00c0-\\uFFFF\\-]|\\\\.)+)(?:\\((['\"]?)((?:\\([^\\)]+\\)|[^\\(\\)]*)+)\\2\\))?/;\r\n/* eslint-disable-next-line max-len */\r\nconst atttributeRe = /^\\[((?:\\\\.|[\\w\\u00c0-\\uFFFF\\-])+)\\s*(?:(\\S?=)\\s*(?:(['\"])([^]*?)\\3|(#?(?:\\\\.|[\\w\\u00c0-\\uFFFF\\-])*)|)|)\\s*(i)?\\]/;\r\n\r\nexport default function parse(selector) {\r\n    selector = selector.trim();\r\n    if (selector in cache) {\r\n        return cache[selector];\r\n    }\r\n\r\n    const groups = [];\r\n    let tokens = [], hasWhitespace = false, token;\r\n\r\n    function getName() {\r\n        const name = selector.match(nameRe)[0];\r\n        reduceSelector(name.length);\r\n        return unescapeCSS(name);\r\n    }\r\n\r\n    function reduceSelector(index) {\r\n        selector = selector.substring(index);\r\n    }\r\n\r\n    function stripWhitespace(start) {\r\n        while (isWhitespace(selector.charAt(start))) start++;\r\n        reduceSelector(start);\r\n    }\r\n\r\n    function isWhitespace(c) {\r\n        return c === ' ' || c === '\\n' || c === '\\t' || c === '\\f' || c === '\\r';\r\n    }\r\n\r\n    function unescapeCSS(str) {\r\n        return str.replace(escapeRe, (match, hex, char) => {\r\n            if (hex) {\r\n                return String.fromCharCode(parseInt(hex, 16));\r\n            }\r\n            return char;\r\n        });\r\n    }\r\n\r\n    function resetToken() {\r\n        token = {\r\n            attributes: [],\r\n            pseudos: []\r\n        };\r\n    }\r\n\r\n    resetToken();\r\n    while (selector !== '') {\r\n        const char = selector.charAt(0);\r\n        if (isWhitespace(char)) {\r\n            hasWhitespace = true;\r\n            stripWhitespace(1);\r\n        } else if (char === '>' || char === '<' || char === '~' || char === '+') {\r\n            if (token.nodeName || token.attributes.length > 0 || token.pseudos.length > 0) {\r\n                tokens.push(token);\r\n            }\r\n            tokens.push(char);\r\n            resetToken();\r\n            hasWhitespace = false;\r\n            stripWhitespace(1);\r\n        } else if (char === ',') {\r\n            tokens.push(token);\r\n            groups.push(tokens);\r\n            resetToken();\r\n            tokens = [];\r\n            hasWhitespace = false;\r\n            stripWhitespace(1);\r\n        } else {\r\n            if (hasWhitespace) {\r\n                tokens.push(token);\r\n                tokens.push(' ');\r\n                resetToken();\r\n                hasWhitespace = false;\r\n            }\r\n            if (char === '*') {\r\n                reduceSelector(1);\r\n                token.nodeName = '*';\r\n            } else if (char === '#') {\r\n                reduceSelector(1);\r\n                token.attributes.push({\r\n                    name: 'id',\r\n                    operator: '=',\r\n                    value: getName(),\r\n                    ignoreCase: false\r\n                });\r\n            } else if (char === '.') {\r\n                reduceSelector(1);\r\n                token.attributes.push({\r\n                    name: 'class',\r\n                    operator: '~=',\r\n                    value: getName(),\r\n                    ignoreCase: false\r\n                });\r\n            } else if (char === '[') {\r\n                const data = selector.match(atttributeRe);\r\n                reduceSelector(data[0].length);\r\n                const name = unescapeCSS(data[1]).toLowerCase();\r\n                token.attributes.push({\r\n                    name,\r\n                    operator: data[2] || '',\r\n                    value: unescapeCSS(data[4] || data[5] || ''),\r\n                    ignoreCase: !!data[6]\r\n                });\r\n            } else if (char === ':') {\r\n                const data = selector.match(pseudoRe);\r\n                reduceSelector(data[0].length);\r\n                const name = unescapeCSS(data[1]).toLowerCase();\r\n                token.pseudos.push({\r\n                    name,\r\n                    value: unescapeCSS(data[3] || '')\r\n                });\r\n            } else if (nameRe.test(selector)) {\r\n                token.nodeName = getName().toLowerCase();\r\n            }\r\n        }\r\n    }\r\n    tokens.push(token);\r\n    groups.push(tokens);\r\n    cache[selector] = groups;\r\n    return groups;\r\n}\r\n"]}